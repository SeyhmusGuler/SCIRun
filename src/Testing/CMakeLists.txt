
#
#  For more information, please see: http://software.sci.utah.edu
# 
#  The MIT License
# 
#  Copyright (c) 2012 Scientific Computing and Imaging Institute,
#  University of Utah.
# 
#  
#  Permission is hereby granted, free of charge, to any person obtaining a
#  copy of this software and associated documentation files (the "Software"),
#  to deal in the Software without restriction, including without limitation
#  the rights to use, copy, modify, merge, publish, distribute, sublicense,
#  and/or sell copies of the Software, and to permit persons to whom the
#  Software is furnished to do so, subject to the following conditions:
# 
#  The above copyright notice and this permission notice shall be included
#  in all copies or substantial portions of the Software. 
# 
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
#  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
#  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
#  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
#  DEALINGS IN THE SOFTWARE.
#

PROJECT(SCIRUN_TESTING)

ADD_SUBDIRECTORY(Utils)

########################################################################
# Configure test support

IF(RUN_UNIT_TESTS)
  FOREACH(test ${UNIT_TEST_LIST})
    ADD_TEST("${test}" "../${EXE_DIRPATH}/${test}")
  ENDFOREACH(test ${UNIT_TEST_LIST})
ENDIF()

########################################################################
# Different testing categories

#OPTION(RUN_MODULE_TESTS "Run individual module unit tests (X must be running)" ON)
#OPTION(RUN_SAMPLE_TESTS "Run the regression test networks (X must be running)" ON)
#OPTION(RUN_OPTIONAL_TESTS "Run the optional test networks (X must be running)" OFF)
#OPTION(RUN_TOOLKITS "Run toolkit networks (X must be running)" ON)

OPTION(RUN_UNIT_TESTS "Run gtest unit tests" ON)
OPTION(RUN_BASIC_REGRESSION_TESTS "Run basic regression tests" ON)

# Directory of baseline images
SET(TESTING_OUTPUT_ROOT "${SCIRUN_TESTING_BINARY_DIR}/../../testing" CACHE PATH "Directory root for testing output files.")
MARK_AS_ADVANCED(TESTING_OUTPUT_ROOT)

MESSAGE(STATUS "Testing output will be written to ${TESTING_OUTPUT_ROOT}.")

SET(BASELINE_IMAGES_DIR "${TESTING_OUTPUT_ROOT}/BaseLineImages" CACHE INTERNAL "Path to baseline images" FORCE)
SET(TEST_IMAGES_DIR "${TESTING_OUTPUT_ROOT}/TestImages" CACHE INTERNAL "Path to test images" FORCE)
SET(DIFF_IMAGES_DIR "${TESTING_OUTPUT_ROOT}/DiffImages" CACHE INTERNAL "Path to difference images" FORCE)
SET(TEST_FILES_DIR "${TESTING_OUTPUT_ROOT}/TestFiles" CACHE INTERNAL "Path to test files other than images (text, fields, matrices etc." FORCE)

IF(NOT IS_DIRECTORY BASELINE_IMAGES_DIR)
  FILE(MAKE_DIRECTORY ${BASELINE_IMAGES_DIR})
ENDIF()

IF(NOT IS_DIRECTORY TEST_IMAGES_DIR)
 FILE(MAKE_DIRECTORY ${TEST_IMAGES_DIR})
ENDIF()

IF(NOT IS_DIRECTORY DIFF_IMAGES_DIR)
 FILE(MAKE_DIRECTORY ${DIFF_IMAGES_DIR})
ENDIF()

IF(NOT IS_DIRECTORY TEST_FILES_DIR)
 FILE(MAKE_DIRECTORY ${TEST_FILES_DIR})
ENDIF()

IF(RUN_BASIC_REGRESSION_TESTS)

   IF(WIN32)
     SET(EXE_LOC ${SCIRun5Prototype_BINARY_DIR}/${BUILD_TYPE}/SCIRunGUIPrototype.exe CACHE PATH "Path to SCIRun executable")
   ELSE(WIN32)
     # TODO: change once testing works with app bundle
     IF(APPLE)
       SET(EXE_LOC ${SCIRun5Prototype_BINARY_DIR}/${TEST_APPLICATION_NAME} CACHE PATH "Path to SCIRun executable")
     ELSE()
       SET(EXE_LOC ${SCIRun5Prototype_BINARY_DIR}/${APPLICATION_NAME} CACHE PATH "Path to SCIRun executable")
     ENDIF()
   ENDIF()
   MESSAGE(STATUS "Using executable: ${EXE_LOC} to test networks")
   
  # Run all the possible .srn files in src/ExampleNets
  FILE(GLOB_RECURSE scirun_srns "${SCIRun5Prototype_SOURCE_DIR}/ExampleNets/*.srn5")
  FOREACH(srn ${scirun_srns})
    GET_FILENAME_COMPONENT(srn_name ${srn} NAME_WE)
    #SET(SRN_ROOT_NAMES "${SRN_ROOT_NAMES} ${srn_name}" CACHE INTERNAL "List of root net names that correspond with image names")
    ADD_TEST(".Test.Samples.${srn_name}_srn" ${EXE_LOC} -E ${srn})
    #FILE(READ ${srn} temp_srn)
    #STRING(REGEX MATCH "ViewScene" contains_ViewScene ${temp_srn})
    #IF(contains_ViewScene)
      #SET(srns_with_viewscene "${srns_with_viewscene} ${srn_name}" CACHE INTERNAL "srns with ViewScene module")
    #ENDIF()
  ENDFOREACH()
ENDIF()
